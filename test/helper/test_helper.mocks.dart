// Mocks generated by Mockito 5.3.2 from annotations
// in suitmedia_intern/test/helper/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:dartz/dartz.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:suitmedia_intern/core/error/failures.dart' as _i10;
import 'package:suitmedia_intern/features/data/datasources/remote_data_sources.dart'
    as _i6;
import 'package:suitmedia_intern/features/data/helper/helper_palindrom.dart'
    as _i5;
import 'package:suitmedia_intern/features/data/models/list_user_model.dart'
    as _i3;
import 'package:suitmedia_intern/features/data/models/response_palindrom_model.dart'
    as _i2;
import 'package:suitmedia_intern/features/data/repositories/repository_impl.dart'
    as _i9;
import 'package:suitmedia_intern/features/domain/entities/list_user.dart'
    as _i12;
import 'package:suitmedia_intern/features/domain/entities/response_palindrom.dart'
    as _i11;
import 'package:suitmedia_intern/features/domain/entities/user.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponsePalindromModel_0 extends _i1.SmartFake
    implements _i2.ResponsePalindromModel {
  _FakeResponsePalindromModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeListUserModel_1 extends _i1.SmartFake implements _i3.ListUserModel {
  _FakeListUserModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_2 extends _i1.SmartFake implements _i4.User {
  _FakeUser_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePalindromFunction_3 extends _i1.SmartFake
    implements _i5.PalindromFunction {
  _FakePalindromFunction_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRemoteDataSource_4 extends _i1.SmartFake
    implements _i6.RemoteDataSource {
  _FakeRemoteDataSource_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_5<L, R> extends _i1.SmartFake implements _i7.Either<L, R> {
  _FakeEither_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PalindromFunction].
///
/// See the documentation for Mockito's code generation for more information.
class MockPalindromFunction extends _i1.Mock implements _i5.PalindromFunction {
  MockPalindromFunction() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.ResponsePalindromModel> call(String? text) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [text],
        ),
        returnValue: _i8.Future<_i2.ResponsePalindromModel>.value(
            _FakeResponsePalindromModel_0(
          this,
          Invocation.method(
            #call,
            [text],
          ),
        )),
      ) as _i8.Future<_i2.ResponsePalindromModel>);
}

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i6.RemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i3.ListUserModel> getListUserRemote(
    int? page,
    int? perPage,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getListUserRemote,
          [
            page,
            perPage,
          ],
        ),
        returnValue: _i8.Future<_i3.ListUserModel>.value(_FakeListUserModel_1(
          this,
          Invocation.method(
            #getListUserRemote,
            [
              page,
              perPage,
            ],
          ),
        )),
      ) as _i8.Future<_i3.ListUserModel>);
  @override
  _i8.Future<_i4.User> getUser(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [id],
        ),
        returnValue: _i8.Future<_i4.User>.value(_FakeUser_2(
          this,
          Invocation.method(
            #getUser,
            [id],
          ),
        )),
      ) as _i8.Future<_i4.User>);
}

/// A class which mocks [RepostioryIMPL].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepostioryIMPL extends _i1.Mock implements _i9.RepostioryIMPL {
  MockRepostioryIMPL() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.PalindromFunction get palindrom => (super.noSuchMethod(
        Invocation.getter(#palindrom),
        returnValue: _FakePalindromFunction_3(
          this,
          Invocation.getter(#palindrom),
        ),
      ) as _i5.PalindromFunction);
  @override
  _i6.RemoteDataSource get remoteDataSource => (super.noSuchMethod(
        Invocation.getter(#remoteDataSource),
        returnValue: _FakeRemoteDataSource_4(
          this,
          Invocation.getter(#remoteDataSource),
        ),
      ) as _i6.RemoteDataSource);
  @override
  _i8.Future<_i7.Either<_i10.Failure, _i11.ResponsePalindrom>> checkPalindrom(
          String? words) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkPalindrom,
          [words],
        ),
        returnValue:
            _i8.Future<_i7.Either<_i10.Failure, _i11.ResponsePalindrom>>.value(
                _FakeEither_5<_i10.Failure, _i11.ResponsePalindrom>(
          this,
          Invocation.method(
            #checkPalindrom,
            [words],
          ),
        )),
      ) as _i8.Future<_i7.Either<_i10.Failure, _i11.ResponsePalindrom>>);
  @override
  _i8.Future<_i7.Either<_i10.Failure, _i12.ListUser>> getListUser(
    int? page,
    int? perPage,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getListUser,
          [
            page,
            perPage,
          ],
        ),
        returnValue: _i8.Future<_i7.Either<_i10.Failure, _i12.ListUser>>.value(
            _FakeEither_5<_i10.Failure, _i12.ListUser>(
          this,
          Invocation.method(
            #getListUser,
            [
              page,
              perPage,
            ],
          ),
        )),
      ) as _i8.Future<_i7.Either<_i10.Failure, _i12.ListUser>>);
  @override
  _i8.Future<_i7.Either<_i10.Failure, _i4.User>> getUser(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [id],
        ),
        returnValue: _i8.Future<_i7.Either<_i10.Failure, _i4.User>>.value(
            _FakeEither_5<_i10.Failure, _i4.User>(
          this,
          Invocation.method(
            #getUser,
            [id],
          ),
        )),
      ) as _i8.Future<_i7.Either<_i10.Failure, _i4.User>>);
}
